/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*!
 * \file two_bit_quantize.cc
 * \brief
 */
#include "./two_bit_quantize-inl.h"

namespace mxnet {
namespace op {

NNVM_REGISTER_OP(_contrib_quantize_2bit)
.describe(R"code(Quantize a input tensor using 2-bit compression with
user-specified threshold - 'pos_threshold' and 'neg_threshold'.

For example, assume the input array is [-1.0, -5.0, -4.0, 2.0, 2.5, 7.5],
, and the negative threshold is -4.0 and the positive is +4.0 . In this method,
the elements >= pos_threshold will be compressed into a 2-bit data '01', which
is represented as the pos_threshold. The elements <= neg_threshold will be
compressed into a 2-bit data '10', which is represented as the neg_threshold.
The other elements will be compressed into '00', which is represented as zero.

out = quantize_2bit(array, neg_threshold, pos_threshold) will return a
compressed array 'out' with 3 elements, in which the first element stores
the neg_threshold (-0.4) and the second element stores the pos_threshold (+0.4),
and the whole input array has been compressed into a single element
(the third element).

Using 2-bit compression, every 16 elements will be compressed into
one float data.

)code" ADD_FILELINE)
.set_num_inputs(3)
.set_num_outputs(1)
.set_attr<nnvm::FInferShape>("FInferShape", Quantize2BitShape)
.set_attr<nnvm::FInferType>("FInferType", Quantize2BitType)
.set_attr<FCompute>("FCompute<cpu>", Quantize2BitCompute<cpu>)
.set_attr<nnvm::FGradient>("FGradient", ElemwiseGradUseNone{"_quantize_2bit"})
.add_argument("input", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("neg_shreshold", "NDArray-or-Symbol", "The negative shreshold")
.add_argument("pos_shreshold", "NDArray-or-Symbol", "The positive shreshold");

NNVM_REGISTER_OP(_contrib_dequantize_2bit)
.describe(R"code(Dequantize a input tensor compressed by quantize_2bit.

dequantize_2bit takes two input arguments. The first one is a NDArray been
generated by quantize_2bit() method. The second input is also a NDArray that
has the same size with the original array not been compressed.

Using the example as was described above.

dequantize_2bit(out, array), the array will become [0, -4.0, -4.0, 0, 0, 4.0]

)code" ADD_FILELINE)
.set_num_inputs(2)
.set_num_outputs(0)
.set_attr<nnvm::FInferShape>("FInferShape", Dequantize2BitShape)
.set_attr<nnvm::FInferType>("FInferType", Dequantize2BitType)
.set_attr<FCompute>("FCompute<cpu>", Dequantize2BitCompute<cpu>)
.set_attr<nnvm::FGradient>("FGradient", ElemwiseGradUseNone{"_dequantize_2bit"})
.add_argument("input_1", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("input_2", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`");

}  // namespace op
}  // namespace mxnet
