/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*!
 * \file two_bit_quantize.cc
 * \brief
 */
#include "./two_bit_quantize-inl.h"

namespace mxnet {
namespace op {

NNVM_REGISTER_OP(_contrib_quantize_2bit)
.describe(R"code(Quantize a input tensor using 2-bit compression with residual
array and user-specified threshold.

For example, assume the input array (gradient) is [-1.0, -5.0, -4.0], and the
residual is [-2.0, 0, 1.0], and the threshold is -4.0 and +4.0, respectively.
In this method, the elements (gradient + residual) >= pos_threshold will be
compressed into a 2-bit data '01', and the elements <= neg_threshold will be
compressed into a 2-bit data '10'. The other elements will be compressed
into '00', which is represented as zero.

In this example, invoke
quantize_2bit(array, residual, neg_threshold, pos_threshold, out), the 'out'
will be the compressed array. Note that, the out array can be generated by
invoking create_2bit(array).

In this example, the 'out' has 3 elements. The first element stores the
neg_threshold (-0.4) and the second element stores the pos_threshold (+0.4),
and the original array will be compressed into a single element in
the third element. In two bit compress, every 16 float data in original array
will be packed into one float data in output array.
)code" ADD_FILELINE)
.set_num_inputs(5)
.set_num_outputs(0)
.set_attr<nnvm::FInferShape>("FInferShape", Quantize2BitShape)
.set_attr<nnvm::FInferType>("FInferType", Quantize2BitType)
.set_attr<FCompute>("FCompute<cpu>", Quantize2BitCompute<cpu>)
.set_attr<nnvm::FGradient>("FGradient", ElemwiseGradUseNone{"_quantize_2bit"})
.add_argument("gradient_array", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("residual_array", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("neg_shreshold", "NDArray-or-Symbol", "The negative shreshold")
.add_argument("compressed_array", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("pos_shreshold", "NDArray-or-Symbol", "The positive shreshold");

NNVM_REGISTER_OP(_contrib_create_2bit)
.describe(R"code(Tp generate a compressed array with right shape.
)code" ADD_FILELINE)
.set_num_inputs(1)
.set_num_outputs(1)
.set_attr<nnvm::FInferShape>("FInferShape", Create2BitArrayShape)
.set_attr<nnvm::FInferType>("FInferType", Create2BitArray2BitType)
.set_attr<FCompute>("FCompute<cpu>", Create2BitArrayCompute<cpu>)
.set_attr<nnvm::FGradient>("FGradient", ElemwiseGradUseNone{"_create_2bit"})
.add_argument("input", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`");

NNVM_REGISTER_OP(_contrib_dequantize_2bit)
.describe(R"code(Dequantize a input tensor compressed by quantize_2bit.

The dequantize_2bit takes two input arguments. The first input is a NDArray,
which has been generated by quantize_2bit(). The second input is also a
NDArray that has the same shape with the original array before compressing.

Using the example as was described above.

Invoke dequantize_2bit(out, array), the 'array' argument will become
[0, -4.0, 0], where -4.0 is the negative threshold.
)code" ADD_FILELINE)
.set_num_inputs(2)
.set_num_outputs(0)
.set_attr<nnvm::FInferShape>("FInferShape", Dequantize2BitShape)
.set_attr<nnvm::FInferType>("FInferType", Dequantize2BitType)
.set_attr<FCompute>("FCompute<cpu>", Dequantize2BitCompute<cpu>)
.set_attr<nnvm::FGradient>("FGradient", ElemwiseGradUseNone{"_dequantize_2bit"})
.add_argument("input_1", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`")
.add_argument("input_2", "NDArray-or-Symbol", "A ndarray/symbol of type `float32`");

}  // namespace op
}  // namespace mxnet
