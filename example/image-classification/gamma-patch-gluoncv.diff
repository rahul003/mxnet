diff --git a/gluoncv/model_zoo/resnetv1b.py b/gluoncv/model_zoo/resnetv1b.py
index e3682e6..62838c7 100644
--- a/gluoncv/model_zoo/resnetv1b.py
+++ b/gluoncv/model_zoo/resnetv1b.py
@@ -56,7 +56,8 @@ class BottleneckV1b(HybridBlock):
     # pylint: disable=unused-argument
     expansion = 4
     def __init__(self, inplanes, planes, strides=1, dilation=1,
-                 downsample=None, previous_dilation=1, norm_layer=None, **kwargs):
+                 downsample=None, previous_dilation=1, norm_layer=None,
+                 last_gamma=False, **kwargs):
         super(BottleneckV1b, self).__init__()
         self.conv1 = nn.Conv2D(in_channels=inplanes, channels=planes, kernel_size=1, use_bias=False)
         self.bn1 = nn.BatchNorm(in_channels=planes)
@@ -66,7 +67,10 @@ class BottleneckV1b(HybridBlock):
         self.bn2 = nn.BatchNorm(in_channels=planes)
         self.conv3 = nn.Conv2D(
             in_channels=planes, channels=planes * 4, kernel_size=1, use_bias=False)
-        self.bn3 = nn.BatchNorm(in_channels=planes * 4)
+        if not last_gamma:
+            self.bn3 = nn.BatchNorm(in_channels=planes * 4)
+        else:
+            self.bn3 = nn.BatchNorm(in_channels=planes * 4, gamma_initializer='zeros')
         self.relu = nn.Activation('relu')
         self.downsample = downsample
         self.dilation = dilation
@@ -124,7 +128,7 @@ class ResNetV1b(HybridBlock):
     """
     # pylint: disable=unused-variable
     def __init__(self, block, layers, classes=1000, dilated=False, norm_layer=BatchNorm,
-                 **kwargs):
+                 last_gamma=False, **kwargs):
         self.inplanes = 64
         super(ResNetV1b, self).__init__()
         with self.name_scope():
@@ -133,25 +137,25 @@ class ResNetV1b(HybridBlock):
             self.bn1 = norm_layer(in_channels=64)
             self.relu = nn.Activation('relu')
             self.maxpool = nn.MaxPool2D(pool_size=3, strides=2, padding=1)
-            self.layer1 = self._make_layer(1, block, 64, layers[0], norm_layer=norm_layer)
+            self.layer1 = self._make_layer(1, block, 64, layers[0], norm_layer=norm_layer, last_gamma=last_gamma)
             self.layer2 = self._make_layer(2, block, 128, layers[1], strides=2,
-                                           norm_layer=norm_layer)
+                                           norm_layer=norm_layer, last_gamma=last_gamma)
             if dilated:
                 self.layer3 = self._make_layer(3, block, 256, layers[2], strides=1, dilation=2,
-                                               norm_layer=norm_layer)
+                                               norm_layer=norm_layer, last_gamma=last_gamma)
                 self.layer4 = self._make_layer(4, block, 512, layers[3], strides=1, dilation=4,
-                                               norm_layer=norm_layer)
+                                               norm_layer=norm_layer, last_gamma=last_gamma)
             else:
                 self.layer3 = self._make_layer(3, block, 256, layers[2], strides=2,
-                                               norm_layer=norm_layer)
+                                               norm_layer=norm_layer, last_gamma=last_gamma)
                 self.layer4 = self._make_layer(4, block, 512, layers[3], strides=2,
-                                               norm_layer=norm_layer)
+                                               norm_layer=norm_layer, last_gamma=last_gamma)
             self.avgpool = nn.AvgPool2D(7)
             self.flat = nn.Flatten()
             self.fc = nn.Dense(in_units=512 * block.expansion, units=classes)

     def _make_layer(self, stage_index, block, planes, blocks, strides=1, dilation=1,
-                    norm_layer=None):
+                    norm_layer=None, last_gamma=False):
         downsample = None
         if strides != 1 or self.inplanes != planes * block.expansion:
             downsample = nn.HybridSequential(prefix='down%d_'%stage_index)
@@ -166,18 +170,19 @@ class ResNetV1b(HybridBlock):
             if dilation == 1 or dilation == 2:
                 layers.add(block(self.inplanes, planes, strides, dilation=1,
                                  downsample=downsample, previous_dilation=dilation,
-                                 norm_layer=norm_layer))
+                                 norm_layer=norm_layer, last_gamma=last_gamma))
             elif dilation == 4:
                 layers.add(block(self.inplanes, planes, strides, dilation=2,
                                  downsample=downsample, previous_dilation=dilation,
-                                 norm_layer=norm_layer))
+                                 norm_layer=norm_layer, last_gamma=last_gamma))
             else:
                 raise RuntimeError("=> unknown dilation size: {}".format(dilation))

             self.inplanes = planes * block.expansion
             for i in range(1, blocks):
                 layers.add(block(self.inplanes, planes, dilation=dilation,
-                                 previous_dilation=dilation, norm_layer=norm_layer))
+                                 previous_dilation=dilation, norm_layer=norm_layer,
+                                 last_gamma=last_gamma))

         return layers


